LINUX
vconfig add eth1 115
vconfig rem eth1.115
cat /proc/net/vlan/config
ifconfig vlan115 192.168.236.2/24

atop -r /var/log/atop/atop_20191120
 iptables-persistent
.bashrc :
HISTSIZE=10000
HISTFILESIZE=10000
zip -r -9 shlp.zip shlp
sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
curl --proxy XX.XX.XX.XX:XXXX -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
#lxc.net.0.type: phys
#lxc.net.0.link: eth1
#lxc.net.0.name: eth1

ss -tuwln
head /var/log/asterisk/messages | egrep -o "\[C-\w*\]"

stty -ixon
tcpdump -ni eth0 tcp -s0 -w 'dump_%Y-%m-%d_%H:%M:%S.pcap' -G60
ngrep host 192.230.50.220 and port not 22
ngrep -W byline "heart" port 10050 > ngrep.txt &

https://registry.hub.docker.com/v2/repositories/library/mysql/tags/
mkdir /etc/systemd/system/docker.service.d/
cd  /etc/systemd/system/docker.service.d/
vim https-proxy.conf
Environment="HTTPS_PROXY=http://XX.XX.XX.XX:XXXX/"
systemctl daemon-reload
systemctl show --property Environment docker
Environment=HTTPS_PROXY=http://XX.XX.XX.XX:XXXX/
systemctl restart docker

image: alpine

test:
  script: cat file1.txt | grep 'Hello world'
  tags:
    - ansible

docker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register

docker run -d --name gitlab-runner --restart always   -v /srv/gitlab-runner/config:/etc/gitlab-runner   -v /var/run/docker.sock:/var/run/docker.sock   gitlab/gitlab-runner:latest

sudo docker run --detach   --hostname 192.168.1.47   --publish 443:443 --publish 80:80 --publish 222:22   --name gitlab   --restart always   --volume /srv/gitlab/config:/etc/gitlab   --volume /srv/gitlab/logs:/var/log/gitlab   --volume /srv/gitlab/data:/var/opt/gitlab   gitlab/gitlab-ce:latest

eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
/etc/apt/sources.list -> deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main
apt-key adv --keyserver keyserver.ubuntu.com --keyserver-options http-proxy=http://10.254.200.45:8888/ --recv-keys 93C4A3FD7BB9C367
apt update
apt install ansible

apt-add-repository --yes --update ppa:ansible/ansible
apt install ansible
ansible all -m copy -a "src=privet.txt dest=/home mode=777" -b
ansible all -m service -a "name=apache2 state=started enabled=yes" -b
ansible all -m yum -a "name=httpd state=latest" -b
ansible all -m uri -a "url=http://ya.ru"
ansible all -m uri -a "url=http://ya.ru return_content=yes"
ansible-doc -l

cd /usr/local/src && wget -qO- https://get.docker.com/ | sh
curl -fsSL get.docker.com | sh
unset {http,https,ftp}_proxy
7z x '*.jar' -o'*'
sudo -l
sudo -ll
sudo -lU user_name
mkdir `date +%d-%m-%Y` && mv ./* `date +%d-%m-%Y`
select-editor
pip freeze > requirements.txt
pip install -r requirements.txt
screen -x screenname - attach
screen -ls - list screens
in screen session : ^a+d - leave session alone

ssh-keygen -t rsa

alias ls="ls -l"
unalias ls

groups username
groupdel group
chage -d 0 username
usermod -aG group username
gpasswd -a username group
gpasswd -d username group
deluser testuser --remove-home
find -maxdepth 2 -name "*.history" -type f ! \( -path "./pythono/*" -o -path "./codo/*" -o -path "./txt/*" \)
find /var/www/html-site -type f -exec chmod 644 {} \;
find . -type f -name "*.pyc" -exec rm {} \;

cat ~/.mozilla/firefox/profiles.ini | grep -i "path"
git clone https://github.com/Unode/firefox_decrypt
python firefox_decrypt/firefox_decrypt.py

date +%s
date -d @1500295952

lxc-ls -f
lxc-console -n 101
lxc-start -n 101 -F -l DEBUG -o /tmp/lxc-101.log


iptables-save > iptables.raw

GIT
git reset --hard 95e7713
git reset --hard HEAD
git reflog
git ls-files
VIM

Installing plugins:
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

sudo curl -sL https://raw.githubusercontent.com/egalpin/apt-vim/master/install.sh | sh
git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree
:help NERDTree.txt

.vimrc:
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
map <F2>  :NERDTreeToggle<CR>
map ,u :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>
map ,h :s#^#<!-- #<CR>:s#$# -->#<CR>


"=====================================================
"" Python-mode settings
"=====================================================
"" отключаем автокомплит по коду (у нас вместо него используется jedi-vim)
let g:pymode_rope = 1
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1

" документация
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'
" проверка кода
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" let g:pymode_lint_ignore="E501,W601,C0110"
" провека кода после сохранения
let g:pymode_lint_write = 1
"
" " поддержка virtualenv
" let g:pymode_virtualenv = 1
"
" " установка breakpoints
" let g:pymode_breakpoint = 1
" let g:pymode_breakpoint_key = '<leader>b'
"
" " подстветка синтаксиса
" let g:pymode_syntax = 1
" let g:pymode_syntax_all = 1
" let g:pymode_syntax_indent_errors = g:pymode_syntax_all
" let g:pymode_syntax_space_errors = g:pymode_syntax_all
"
" " отключить autofold по коду
" let g:pymode_folding = 0
"
" " возможность запускать код
" let g:pymode_run = 0
"


au FileType python setlocal formatprg=autopep8\ -

autocmd BufLeave,FocusLost silent! wall

au BufRead,BufNewFile * let b:save_time = localtime()

au CursorHold * call UpdateFile()

let g:autosave_time = 1

" save if needed / update the save_time after the save
function! UpdateFile()
   if((localtime() - b:save_time) >= g:autosave_time)
         update
         let b:save_time = localtime()
   else
" just debugging info
         echo "[+] ". (localtime() - b:save_time) ."seconds have elapsed so far."
   endif
endfunction

set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'klen/python-mode'
Plugin 'scrooloose/nerdtree'
" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)

" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

export EDITOR=vim; crontab -e
vim VIM Vim
set number
set nonumber
^#\@!\&^\n\@!



PYTHON
python3.6 -m pip install flask
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update

MYSQL
mysql -h localhost -u root -B monitor -p < monitor.sql
FLUSH TABLES WITH READ LOCK; SYSTEM mysqldump -u root --databases asterisk phonebase cdrbase -p{{ password }} > /root/master_dump.sql; UNLOCK TABLES;
delete from cdrbase.cdr_asterisk where calldate<'2019-01-01 00:00:00';
mysql --password="1" -e "show slave status\G" | grep Master_User | awk '{ print $2 }'
show create table gtid_slave_pos;
show table status from   ;
SET PASSWORD FOR 'bill'@'localhost' = PASSWORD('bgbilling');
create user 'replicator'@'%' identified by 'password';
grant replication slave on *.* to 'replicator'@'%';
CHANGE MASTER TO MASTER_HOST = '10.10.0.1', MASTER_USER = 'replicator', MASTER_PASSWORD = 'password', MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POS = 107;

GRANT ALL PRIVILEGES ON ...
GRANT SELECT ON *.* TO 'user'@'XX.XX.XX.XX';
REVOKE SELECT ON *.* FROM 'user'@'XX.XX.XX.XX';

sudo apt install python3.6
